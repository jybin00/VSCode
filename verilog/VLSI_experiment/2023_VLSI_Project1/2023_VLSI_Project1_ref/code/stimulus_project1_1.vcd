$date
	Fri May  5 17:46:38 2023
$end
$version
	Icarus Verilog
$end
$timescale
	10ps
$end
$scope module stimulus_project1 $end
$var wire 1 ! done $end
$var reg 1 " clk $end
$var reg 22 # mat_out [21:0] $end
$var reg 22 $ out [21:0] $end
$var reg 1 % rstn $end
$var reg 1 & start $end
$var integer 32 ' err [31:0] $end
$var integer 32 ( i [31:0] $end
$scope module CON $end
$var wire 1 " clk $end
$var wire 1 % rstn $end
$var wire 1 & start $end
$var wire 22 ) mul_out [21:0] $end
$var wire 18 * cnt_out [17:0] $end
$var wire 22 + Out_C [21:0] $end
$var wire 8 , Out_B [7:0] $end
$var wire 8 - Out_A [7:0] $end
$var wire 12 . Addr_C [11:0] $end
$var wire 12 / Addr_B [11:0] $end
$var wire 12 0 Addr_A [11:0] $end
$var reg 1 1 NCE $end
$var reg 1 2 NCE_C $end
$var reg 1 ! done $end
$var reg 1 3 flag $end
$var reg 1 4 nwrt_A $end
$var reg 1 5 nwrt_B $end
$var reg 1 6 nwrt_C $end
$scope module MEM_A $end
$var event 1 7 write $end
$var event 1 8 read $end
$var wire 2 9 CA [1:0] $end
$var wire 1 " CLK $end
$var wire 8 : DIN [7:0] $end
$var wire 1 1 NCE $end
$var wire 1 4 NWRT $end
$var wire 10 ; RA [9:0] $end
$var wire 8 < DO [7:0] $end
$var wire 8 = BDO [7:0] $end
$var wire 12 > A [11:0] $end
$var reg 1 ? FLAG_X $end
$var reg 8 @ do_reg [7:0] $end
$var reg 12 A r_addr [11:0] $end
$var reg 8 B r_din [7:0] $end
$var reg 1 C r_nce $end
$var reg 1 D r_nwrt $end
$var reg 8 E temp_reg [7:0] $end
$var reg 8 F write_data [7:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module MEM_B $end
$var event 1 H write $end
$var event 1 I read $end
$var wire 2 J CA [1:0] $end
$var wire 1 " CLK $end
$var wire 8 K DIN [7:0] $end
$var wire 1 1 NCE $end
$var wire 1 5 NWRT $end
$var wire 10 L RA [9:0] $end
$var wire 8 M DO [7:0] $end
$var wire 8 N BDO [7:0] $end
$var wire 12 O A [11:0] $end
$var reg 1 P FLAG_X $end
$var reg 8 Q do_reg [7:0] $end
$var reg 12 R r_addr [11:0] $end
$var reg 8 S r_din [7:0] $end
$var reg 1 T r_nce $end
$var reg 1 U r_nwrt $end
$var reg 8 V temp_reg [7:0] $end
$var reg 8 W write_data [7:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module MEM_C $end
$var event 1 Y write $end
$var event 1 Z read $end
$var wire 2 [ CA [1:0] $end
$var wire 1 " CLK $end
$var wire 1 1 NCE $end
$var wire 1 6 NWRT $end
$var wire 10 \ RA [9:0] $end
$var wire 22 ] DO [21:0] $end
$var wire 22 ^ DIN [21:0] $end
$var wire 22 _ BDO [21:0] $end
$var wire 12 ` A [11:0] $end
$var reg 1 a FLAG_X $end
$var reg 22 b do_reg [21:0] $end
$var reg 12 c r_addr [11:0] $end
$var reg 22 d r_din [21:0] $end
$var reg 1 e r_nce $end
$var reg 1 f r_nwrt $end
$var reg 22 g temp_reg [21:0] $end
$var reg 22 h write_data [21:0] $end
$var integer 32 i i [31:0] $end
$upscope $end
$scope module Matrix_Accumulation $end
$var wire 8 j a [7:0] $end
$var wire 8 k b [7:0] $end
$var wire 1 " clk $end
$var wire 6 l q [5:0] $end
$var wire 1 & start $end
$var wire 16 m temp_mul [15:0] $end
$var reg 6 n cnt [5:0] $end
$var reg 22 o matrix_mul_out [21:0] $end
$var reg 22 p mul_out [21:0] $end
$upscope $end
$scope module memory_controller $end
$var wire 1 " clk $end
$var wire 1 % rstn $end
$var wire 1 & start $end
$var reg 18 q cnt [17:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#1000
$dumpvars
b1 q
b0 p
bx o
b0 n
bx m
b1 l
bx k
bx j
b1000000000000 i
bx h
bx g
xf
xe
b0 d
b0 c
bx b
0a
b0 `
bx _
b0 ^
bx ]
b0 \
b0 [
1Z
1Y
b1000000000000 X
bx W
bx V
xU
xT
b0 S
b0 R
bx Q
0P
b1000000 O
bx N
bx M
b10000 L
b0 K
b0 J
1I
1H
b1000000000000 G
bx F
bx E
xD
xC
b0 B
b0 A
bx @
0?
b1 >
bx =
bx <
b0 ;
b0 :
b1 9
18
17
x6
x5
x4
x3
x2
x1
b1 0
b1000000 /
b0 .
bx -
bx ,
bx +
b1 *
b0 )
b0 (
b0 '
0&
1%
bx $
bx #
1"
x!
$end
